# Nginx configuration file example
# This is a general-purpose configuration for web servers or reverse proxies.
# It supports static file serving, reverse proxying, HTTPS, and common optimizations.
# For detailed documentation, see: http://nginx.org/en/docs/

# Run Nginx as a non-root user for security (replace 'nginx' with your user if needed)
user nginx;

# Automatically set the number of worker processes based on CPU cores
worker_processes auto;

# Increase the limit of open file descriptors for high-traffic servers
# Ensure system limits (e.g., /etc/security/limits.conf) allow this value
worker_rlimit_nofile 65535;

# Log errors to a file with 'warn' level to reduce verbosity
error_log /var/log/nginx/error.log warn;

# Store the Nginx process ID
pid /run/nginx.pid;

# Event handling configuration for high-performance connections
events {
    # Maximum number of simultaneous connections per worker
    worker_connections 8192;

    # Accept multiple connections at once for better performance
    multi_accept on;

    # Use epoll for Linux systems (comment out if not on Linux)
    use epoll;
}

# HTTP server configuration
http {
    # Hide Nginx version for security
    server_tokens off;

    # Define a custom log format for access logs
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    # Log client requests with buffering to reduce disk I/O
    access_log /var/log/nginx/access.log main buffer=16k flush=5m;

    # Enable sendfile for efficient file transfers
    sendfile on;

    # Enable TCP optimizations
    tcp_nopush on;
    tcp_nodelay on;

    # Set keepalive timeout for client connections
    keepalive_timeout 65;

    # Increase hash table size for MIME types
    types_hash_max_size 2048;

    # Limit maximum client request body size (e.g., file uploads)
    client_max_body_size 10m;

    # Enable gzip compression to reduce response size
    gzip on;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
    gzip_min_length 256;
    gzip_comp_level 6;

    # Include MIME types for proper content-type headers
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Include additional configuration files for specific sites (optional)
    # Place custom server blocks in /etc/nginx/conf.d/*.conf
    include /etc/nginx/conf.d/*.conf;

    # HTTP server (redirects all traffic to HTTPS)
    server {
        listen 80 default_server;
        listen [::]:80 default_server;
        server_name _;

        # Redirect all HTTP traffic to HTTPS
        # Replace '_' with your domain (e.g., example.com) if needed
        return 301 https://$host$request_uri;
    }

    # HTTPS server
    server {
        listen 443 ssl http2 default_server;
        listen [::]:443 ssl http2 default_server;
        server_name _;

        # Path to SSL certificate and key (replace with your own paths)
        # Example: /etc/letsencrypt/live/example.com/fullchain.pem
        ssl_certificate /etc/pki/nginx/server.crt;
        ssl_certificate_key /etc/pki/nginx/private/server.key;

        # SSL session caching for performance
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;

        # Use modern TLS protocols and ciphers for security
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;

        # Enable OCSP stapling for faster certificate validation
        ssl_stapling on;
        ssl_stapling_verify on;
        resolver 8.8.8.8 8.8.4.4 valid=300s;
        resolver_timeout 5s;

        # Enforce HTTPS with HSTS
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

        # Add security headers to protect against common attacks
        add_header X-Content-Type-Options "nosniff";
        add_header X-Frame-Options "DENY";
        add_header X-XSS-Protection "1; mode=block";

        # Root directory for serving static files
        # Replace with your static file directory if needed
        root /usr/share/nginx/html;

        # Include additional configuration files for this server (optional)
        # Place custom configurations in /etc/nginx/default.d/*.conf
        include /etc/nginx/default.d/*.conf;

        # Example: Proxy for a statistics API backend
        # Replace '127.0.0.1:8888' with your backend address (e.g., http://api:3000)
        location /api/get-stats {
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 4 32k;
            proxy_pass http://127.0.0.1:8888$request_uri;
        }

        # Example: Proxy for a main API backend
        # Replace '127.0.0.1:9999' with your backend address
        location /api {
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 4 32k;
            proxy_pass http://127.0.0.1:9999$request_uri;
        }

        # Default location for serving static files or proxying to a frontend
        # Replace '127.0.0.1:8080' with your frontend address if proxying
        location / {
            # Try serving static files first, then proxy if not found
            try_files $uri $uri/ @proxy;
        }

        # Named location for proxying to frontend
        location @proxy {
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 4 32k;
            proxy_pass http://127.0.0.1:8080;
        }

        # Custom error pages for 404 and server errors
        error_page 404 /404.html;
        location = /404.html {
            internal;
        }

        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            internal;
        }
    }
}